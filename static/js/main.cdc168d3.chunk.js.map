{"version":3,"sources":["components/stateClass.js","components/simpleCounter.js","App.js","serviceWorker.js","index.js"],"names":["StateClass","props","changeLoadingState","setState","isLoading","state","getElementName","index","data","console","log","classMateName","classMateFoto","classKomodoFoto","title","classKomodo","this","onClick","id","className","map","key","src","alt","Component","SimpleCounter","add","counter","substract","alert","toString","padStart","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAiHeA,E,YA9Gb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAyCRC,mBAAqB,WACnB,EAAKC,SAAS,CACZC,WAAY,EAAKC,MAAMD,aA5CR,EAgDnBE,eAAiB,SAACC,EAAOC,GACvBC,QAAQC,IAAR,WAAgBH,EAAhB,aAA0BC,IAC1B,EAAKL,SAAS,CACZQ,cAAeH,EACfI,cAAe,EAAKP,MAAMQ,gBAAgBN,MAlD5C,EAAKF,MAAQ,CACXS,MAAO,iBACPV,WAAW,EACXW,YAAa,CACX,OACA,MACA,QACA,OACA,OACA,UACA,SACA,QACA,SACA,QACA,OACA,OACA,SAGFF,gBAAiB,CACf,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,yDAEFF,cAAe,GAEfC,cAAe,IAtCA,E,sEAuDT,IAAD,OACP,OAAKI,KAAKX,MAAMD,UAWZ,6BACE,qDAEA,4BAAQa,QAASD,KAAKd,oBACnBc,KAAKX,MAAMD,UACR,yBACA,0BAEN,yBAAKc,GAAG,gBACN,yBAAKC,UAAU,cACb,mDACA,oDACA,4BACGH,KAAKX,MAAMU,aACVC,KAAKX,MAAMU,YAAYK,KAAI,SAACZ,EAAMD,GAChC,OACE,wBACEc,IAAKd,EACLU,QAAS,kBAAM,EAAKX,eAAeC,EAAOC,KAEzCA,QAOb,yBAAKW,UAAU,gBACZH,KAAKX,MAAMM,eACV,uBAAGQ,UAAU,aAAaH,KAAKX,MAAMM,eAEvC,yBACEW,IAAKN,KAAKX,MAAMO,cAChBW,IAAKP,KAAKX,MAAMM,mBA1CxB,6BACE,qDACA,4BAAQM,QAASD,KAAKd,oBAAtB,+B,GA7DesB,aCmCVC,E,YAlCb,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KAKRyB,IAAM,WACJ,EAAKvB,SAAS,CACZwB,QAAS,EAAKtB,MAAMsB,QAAU,KARf,EAWnBC,UAAY,WACV,EAAKvB,MAAMsB,QACP,EAAKxB,SAAS,CAAEwB,QAAS,EAAKtB,MAAMsB,QAAU,IAC9CE,MAAM,uCAZV,EAAKxB,MAAQ,CACXsB,QAAS,GAHM,E,sEAiBjB,OACE,6BACE,yFACA,6BACA,wBAAIR,UAAU,WAAd,kBACA,4BAAQF,QAASD,KAAKU,KAAtB,QACA,wBAAIP,UAAU,WACXH,KAAKX,MAAMsB,QAAQG,WAAWC,SAAS,EAAG,MAE7C,4BAAQd,QAASD,KAAKY,WAAtB,QAEA,8F,GA7BoBJ,aCabQ,MATf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cdc168d3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass StateClass extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"Simple Counter\",\n      isLoading: false,\n      classKomodo: [\n        \"Dani\",\n        \"Ega\",\n        \"Latif\",\n        \"Dian\",\n        \"Roby\",\n        \"Iqbal M\",\n        \"Sofyan\",\n        \"Zakin\",\n        \"Taufiq\",\n        \"Bagus\",\n        \"Baim\",\n        \"Iman\",\n        \"Iqbal\"\n      ],\n\n      classKomodoFoto: [\n        \"https://avatars0.githubusercontent.com/u/54284014?v=4\",\n        \"https://avatars0.githubusercontent.com/u/54344973?v=4\",\n        \"https://avatars0.githubusercontent.com/u/57086522?v=4\",\n        \"https://avatars0.githubusercontent.com/u/53134076?v=4\",\n        \"https://avatars2.githubusercontent.com/u/30195503?v=4\",\n        \"https://avatars1.githubusercontent.com/u/30194879?v=4\",\n        \"https://avatars3.githubusercontent.com/u/22201585?v=4\",\n        \"https://avatars3.githubusercontent.com/u/29705088?v=4\",\n        \"https://avatars0.githubusercontent.com/u/57085477?v=4\",\n        \"https://avatars2.githubusercontent.com/u/50207673?v=4\",\n        \"https://avatars2.githubusercontent.com/u/49808623?v=4\",\n        \"https://avatars0.githubusercontent.com/u/54432317?v=4\",\n        \"https://avatars0.githubusercontent.com/u/57086521?v=4\"\n      ],\n      classMateName: \"\",\n\n      classMateFoto: \"\"\n    };\n  }\n\n  changeLoadingState = () => {\n    this.setState({\n      isLoading: !this.state.isLoading\n    });\n  };\n\n  getElementName = (index, data) => {\n    console.log(`[${index}] ${data}`);\n    this.setState({\n      classMateName: data,\n      classMateFoto: this.state.classKomodoFoto[index]\n    });\n  };\n  render() {\n    if (!this.state.isLoading) {\n      return (\n        <div>\n          <h1>Batch #11 Kind Komodo</h1>\n          <button onClick={this.changeLoadingState}>\n            Show my Classmate list\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h1>Batch #11 Kind Komodo</h1>\n\n          <button onClick={this.changeLoadingState}>\n            {this.state.isLoading\n              ? \"Hide my Classmate list\"\n              : \"Show my Classmate list\"}\n          </button>\n          <div id=\"class-komodo\">\n            <div className=\"class-list\">\n              <h3>Click Name to show </h3>\n              <h3>Github Photo Profile</h3>\n              <ul>\n                {this.state.classKomodo &&\n                  this.state.classKomodo.map((data, index) => {\n                    return (\n                      <li\n                        key={index}\n                        onClick={() => this.getElementName(index, data)}\n                      >\n                        {data}\n                      </li>\n                    );\n                  })}\n              </ul>\n            </div>\n\n            <div className=\"class-detail\">\n              {this.state.classMateName && (\n                <p className=\"classmate\">{this.state.classMateName}</p>\n              )}\n              <img\n                src={this.state.classMateFoto}\n                alt={this.state.classMateName}\n              />\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default StateClass;\n","import React, { Component } from \"react\";\n\nclass SimpleCounter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0\n    };\n  }\n  add = () => {\n    this.setState({\n      counter: this.state.counter + 1\n    });\n  };\n  substract = () => {\n    this.state.counter\n      ? this.setState({ counter: this.state.counter - 1 })\n      : alert(\"You Can't make counter to negative\");\n  };\n  render() {\n    return (\n      <div>\n        <h3>=========================================================</h3>\n        <br />\n        <h1 className=\"counter\">Simple Counter</h1>\n        <button onClick={this.add}> +1 </button>\n        <h1 className=\"counter\">\n          {this.state.counter.toString().padStart(4, \"0\")}\n        </h1>\n        <button onClick={this.substract}> -1 </button>\n\n        <h3>=========================================================</h3>\n      </div>\n    );\n  }\n}\n\nexport default SimpleCounter;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport StateClass from \"./components/stateClass\";\nimport SimpleCounter from \"./components/simpleCounter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StateClass />\n      <SimpleCounter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}